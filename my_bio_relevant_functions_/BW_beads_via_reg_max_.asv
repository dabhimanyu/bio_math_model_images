function [ img  ,  BW  , CC ]    =   BW_beads_via_reg_max_( img )

%% Inout Paramaters:

wFiltSize   =   3 ;     % 2 for real Images:
medFiltSize =   3 ;   % 2 For Real Images:

%%
im_original = img ; 
img2 = img ; 
img2    =       imadjust(img) ; 
img2    =       wiener2(img2 , wFiltSize*[1,1]) ;     % figure(1) ; imshow(img) ; 

% To remobe boundary artifacts:
img2    =       padarray(img2 , [3,3] , 0) ; 
im_original    =       padarray(im_original , [3,3] , 0) ; 
% img2    =       imsharpen(img2 , 'radius' , 1.05 ,...    % figure(2) ; imshow(img2) ; 
%                 'amount' , 1.6 , 'threshold', 0.7 ) ;       % figure(3) ; imshow(img2) ; 
% img2    =       medfilt2(img2 , medFiltSize*[1,1] ) ;    % figure(4) ; imshow(img2) ; 

% Generate Mask:
% Thresh Of 130-150 Seems To Work:
% artificial_img_thresh = 5e3 ;      % figure(1) ; imshow(img) ; 
% BW = img2 > artificial_img_thresh ;  % figure(11); imshowpair(img2 , BW) ; 
% img(~BW) = 0 ;                      % figure(2) ; imshow(img) ; 

% Eliminate everything from the image except for the Islands:
% img2    =       imadjust(img2) ; 
BW      =       imbinarize(img2 , 'adaptive' , 'Sensitivity', 0 , ...
                'ForegroundPolarity','bright') ;
% Open BW with Square SE:
% BW      =       imopen(BW , strel('square' , 3)) ; 
BW      =       imfill(BW , 'holes') ; 
im_original(~BW) = 0 ; 
img = im_original ; 

img = imadjust(img)     ;       % figure(4) ; imshow(img , [] ) ; 

% img     =       imhmin(img , 10 , 4) ; 

img(img<5000) = 0 ; 
% img     =       wiener2(img , wFiltSize*[1,1]) ; 
img     =       imgaussfilt(img , 0.5 ,'Padding' , 'symmetric' ) ;  % , "FilterSize", 3 ) ; %  
img     =       medfilt2(img , (-1+medFiltSize)*[1,1] ) ;

% 

% img     =       imhmax(img , 2 , 8)     ; 
BW      =       imregionalmax(img , 8)  ;      % figure(11) ; imshowpair(img , BW) ; 
BW      =       imfill(BW , "holes")    ; 

% Initial Connected Component:
CC      =       bwconncomp(BW , 4)  ; 

% Calculate Size Of the Islands:
CC.islandSize    =       cellfun(@numel , CC.PixelIdxList)' ;

% % % % CC.meanIntensity =       cellfun(@mean  , ) 
% % % CCws            =       CC ; % Creating a copy of CC, WS -> WaterShed 
% % % 
% % % % Eliminate Islands with size less than size_thresh
% % % min_island_size = 01 ; 
% % % max_island_size = 05 ; 
% % % 
% % % % Determine the erroneous Islands:
% % % chotu_islands   =       find( ~( (CC.islandSize <  min_island_size) | (CC.islandSize > max_island_size) ) ) ; 
% % % faltu_islands   =       find(  ( (CC.islandSize <  min_island_size) | (CC.islandSize > max_island_size) ) ) ; 
% % % 
% % % %Create Chotu island BW:
% % % BW_4_chotu_islands = zeros(CC.ImageSize) ; 
% % % BW_4_faltu_islands = BW_4_chotu_islands  ;
% % % 
% % % BW_4_chotu_islands(cell2mat(CC.PixelIdxList(chotu_islands).')) = 1 ; 
% % % BW_4_faltu_islands(cell2mat(CC.PixelIdxList(faltu_islands).')) = 1 ; 
% % % 
% % % % No need to alter the small islands :)
% % % BW_4_faltu_islands =  imdilate(BW_4_faltu_islands , strel('disk' , 1) ) ;
% % % 
% % % % Figure out why these code lines are  NOT Working:
% % % % img_4_chotu_islands = img ; 
% % % % img_4_chotu_islands = img_4_chotu_islands(:) ; 
% % % % img_4_chotu_islands(~BW_4_chotu_islands(:)) = uint16(0) ; 
% % % % 
% % % % img_4_faltu_islands = img ; 
% % % % img_4_faltu_islands(~BW_4_faltu_islands) = uint16(0) ; 
% % % 
% % % % Create Bounding Box over the components:
% % % 
% % % CC_4_faltu_islands = bwconncomp(BW_4_faltu_islands , 4) ; 
% % % % CC_4_faltu_islands =  
% % % props = regionprops(CC_4_faltu_islands , 'BoundingBox' , 'Image') ;
% % % 
% % % BW_ws = BW ;  % BW waterShed
% % % 
% % %  % Remove these islands from the Binarized Mask and update CC accordingly:         
% % %         for i = 1 : length(faltu_islands)
% % %             BW_ws( CC.PixelIdxList{ faltu_islands(i) } )   =   false   ; 
% % %         end
% % % 
% % % % Formulate Distance Matrix:
% % % watershed_thresh = 1 ; 
% % % d               =       imcomplement(bwdist(~BW_ws)) ; 
% % % 
% % % % H-Min Transform To Eliminate smaller peaks:
% % % d               =       imhmin(d , watershed_thresh) ; 
% % % 
% % % particleSep     =       watershed(d) ; % NOTE that particleSep is a labelMatrix
% % % particleSep(~BW_ws) = 0 ; 
% % % 
% % % BW_ws              =       particleSep > 0 ;    % Binarizing Label Matrix
% % % % img(~BW_ws)        =       0  ;  
% % % % img             =       reshape(img , size(img , 1) , [] )  ; 

% %         %%%% Visualize Distance Matrix:
% %         figure(53) ; clf ;
% %         imshow(d , [] ) ; 
% %         imshow(d(I1 , I2)) ; 
% %         imshow(d(I1 , I2) , [] ) ; 
% %         title('\fontsize{20} Distance Matrix (D)')

%  To make 
[x , y] =       cellfun( @(x) ind2sub(CC.ImageSize , x) , ...
                CC.PixelIdxList' , 'UniformOutput',0 ) ; 
CC.centroid  = [ cellfun(@(x) mean(x) , y) , cellfun(@(x) mean(x) , x) ]  ; 

pj_break = 3 ; 
end






